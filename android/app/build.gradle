def localProperties = new Properties()
	def localPropertiesFile = rootProject.file('local.properties')
	if (localPropertiesFile.exists()) {
		localPropertiesFile.withReader('UTF-8') { reader ->
			localProperties.load(reader)
		}
	}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
	throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
	flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
	flutterVersionName = '1.0'
}

def mapsProperties = new Properties()
	def localMapsPropertiesFile = rootProject.file('local_maps.properties')
	if (localMapsPropertiesFile.exists()) {
		project.logger.info('Load maps properties from local file')
			localMapsPropertiesFile.withReader('UTF-8') { reader ->
				mapsProperties.load(reader)
			}
	} else {
		project.logger.info('Load maps properties from environment')
			try {
				mapsProperties['MAPS_API_KEY'] = System.getenv('MAPS_API_KEY')
			} catch(NullPointerException e) {
				project.logger.warn('Failed to load MAPS_API_KEY from environment.', e)
			}
	}
def mapsApiKey = mapsProperties.getProperty('MAPS_API_KEY')
if(mapsApiKey == null){
	mapsApiKey = ""
		project.logger.error('Google Maps Api Key not configured. Set it in `local_maps.properties` or in the environment variable `MAPS_API_KEY`')
}


apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {

	compileSdkVersion 31

		sourceSets {
			main.java.srcDirs += 'src/main/kotlin'
		}

	defaultConfig {
		// TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).


		applicationId "com.zenithaerospace.monitor"
			minSdkVersion 21
			targetSdkVersion 31
			multiDexEnabled true
			versionCode flutterVersionCode.toInteger()
			versionName flutterVersionName
			manifestPlaceholders = [MAPS_API_KEY: mapsApiKey]
	}

	buildTypes {
		release {
			// TODO: Add your own signing config for the release build.
			// Signing with the debug keys for now, so `flutter run --release` works.
			signingConfig signingConfigs.debug
		}
	}
	compileOptions {
		sourceCompatibility 1.8
			targetCompatibility 1.8
	}
}

flutter {
	source '../..'
}

dependencies {
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
		implementation platform('com.google.firebase:firebase-bom:28.4.1')
		implementation 'com.google.firebase:firebase-auth'
		implementation 'com.google.android.gms:play-services-auth:19.2.0'
		implementation 'com.android.support:multidex:1.0.3'
}
